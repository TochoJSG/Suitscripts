/**
 * @param {nlobjRequest} request Request object
 * @param {nlobjResponse} response Response object
 * @returns {Void} Any output is written via response object
 */

 define(['N/record', 
        'N/search', 
        '../Lodash/Lodash', 
        '../Config/Environment'],

 function(recordPurchase) {
    
     /**
      * 
      *
      * @param {Object} context
      * @param {ServerRequest} context.request 
      * @param {ServerResponse} context.response 
      */
     function getPurchaseStatus(beginP,endP){
         try{
             var contexto = recordPurchase.create({
                 type: 'purchaseorder',
                 filters: [ { name: 'trandate', operator: 'WITHIN',values: [beginP, endP] } ],
                 columns : [
                        { name:'trandate'},
                        { name:'internalid'},
                        { name:'item'},
                        { name:'tranid'},
                        { name:'statusref'},
                        { name:'internalid',join:'vendor'}]
             });
             var purchaseOrder = [];
             contexto.run().each(function (resultado) {
                 var jsonData = {};
                 jsonData.internalid = resultado.values.internalid[0].value;
                 jsonData.tranid = resultado.values.tranid;
                 jsonData.stauts = resultado.values.status[0].value;
                 purchaseOrder.push(jsonData);
                 return true;
               });
             return purchaseOrder;
         }catch(error){
             log.error('Was an Error',error);
         }
     }
 
     return {
        getPurchaseStatus: getPurchaseStatus};
 });
/*
   /**
   * 
   * @param {*} record_type 
   * @param {*} id 
   * @returns {*} objReturn for Dilogin Input
   *
    function inputDto(record_type,id){
      var isError = false;
      var msg = 'Msg Default [7]';
      var items = [];
      var wmsDto = {};
      var objReturn = {};
      //Para el purchase order estatus Pending Receipt
      try{
        var filters = [];
        filters.push({name:"internalid", operator:"is", values:id});
        filters.push({name:"itemtype", operator:"is", values:['InvtPart','Kit']});
        
        //log.debug("record_type",record_type);
        if(record_type == 'purchaseorder'){
          //filters.push({name:"status", operator:"is", values:"pendingReceipt"});
          filters.push({name:"status", operator:"anyof", values:"PurchOrd:B"});
        }
        
        //log.debug("filters",filters);
        var searchInput = search.create({
          type: record_type,
            filters: filters,
            columns : [
              //{ name: 'status'},
                { name: 'internalid'},
                {name: "custbody11"},//Fecha Entrega
                { name: 'internalid',join:'vendor'},
                { name: 'internalid',join:'customer'},
                { name: 'location'},
                { name: 'custbody_consignacion'},
                { name: 'custbody_amazon_smec'},
                { name: 'custbody_response_dilogin_input'},
                { name: 'item'},
                { name: 'itemtype'},
                { name: 'quantity'},
                { name: 'upccode', join: 'item'},
                { name: 'custitem1', join: 'item'}, //idVertical
                { name: "custitem_talla", join : "item"},
                { name: 'custitem_color', join: 'item'},
                { name: 'custitem13', join: 'item'}, //Modelo
                { name: 'custbody_quality_status'},
            ]
        });
        var countItem = 0;
          searchInput.run().each(function (result) {
            //log.debug("status",result.getValue({ name: 'status'}));

            var item={};
            /*            
            if(result.getValue({ name: 'custbody_response_dilogin_input'}) != ''){
              isError = true;
              msg = 'Dilogin realizado previamente';
            }
            */
           /*
            var fechaEntrega = result.getValue({name: "custbody11"});
            if(fechaEntrega == null || fechaEntrega == ''){
              wmsDto.fechaEntrega = moment(today, "DD/MM/YYYY");
              wmsDto.fechaEntrega = wmsDto.fechaEntrega.format("DD/MM/YYYY");
            }
            else{
              wmsDto.fechaEntrega = fechaEntrega;
            }
            
            wmsDto.fechaEntrega = moment(today, "DD/MM/YYYY");
            wmsDto.fechaEntrega = wmsDto.fechaEntrega.format("DD/MM/YYYY");

            wmsDto.idOdc = id;
            wmsDto.idAlmacen = result.getValue({name: 'location'});
            wmsDto.idProveedor = 0;
            switch (record_type) {
              case 'purchaseorder':
                wmsDto.idProveedor = result.getValue({ name: 'internalid',join:'vendor'});
                break;
              case 'returnauthorization':
                wmsDto.idProveedor = result.getValue({ name: 'internalid',join:'customer'});
                break;
            }
            //log.debug("wmsDto.idProveedor",wmsDto.idProveedor)
            if(result.getValue({name: "custbody_amazon_smec"}) == true ){
              wmsDto.idAlmacen = 15;
            }

            wmsDto.tipoOdc = 'Firme';
            if(record_type == 'purchaseorder')
            {
              if(result.getValue({name: "custbody_consignacion"}) == true ){
                wmsDto.tipoOdc = 'Consigna';
              }
            }
            

            wmsDto.idSeller = '';
            wmsDto.sellerName = '';
            countItem += 1;
            item.atributo = 'Talla: ' + result.getValue({name: "custitem_talla", join : "item"}) + ' Color: ' + result.getValue({name: "custitem_color", join : "item"});
            item.cantidad = Math.abs(parseInt(result.getValue({name: "quantity"})));
            item.descripcion = result.getText({name: "item"});
            item.descripcion = item.descripcion.replace(/[^a-zA-Z 0-9.]+/g, '');        
            item.ean = result.getValue({ name: 'upccode', join: 'item'});
            item.idVertical = 0;
            if(result.getValue({ name: 'custitem1', join: 'item'}).length > 0){
              item.idVertical = result.getValue({ name: 'custitem1', join: 'item'});
            }
            item.idWb = countItem;
            item.modelo = result.getValue({ name: 'custitem13', join: 'item'});
            item.sku = result.getValue({ name: 'upccode', join: 'item'});
            item.validaSerie = "0";
            item.imagen = "";
            item.publication = "";
            item.validaCaducidad = "";
            item.edoCal = result.getText({ name: 'custbody_quality_status'});
            items.push(item);
            if(item.edoCal == ''){
              isError = true;
              msg = "Completar campo Estado Calidad WMS";
            }
            return true;
          });
          wmsDto.listProducto = items;
          wmsDto = JSON.stringify(wmsDto);

          if(countItem == 0){
            isError = true;
            msg = "Sin Items para Dilogin";
          }
      }
      catch(error){
        log.error('Dilogin inputDto',error);
        isError = true;
        msg = 'Internal Error GetDto ' + record_type + ' Id: '  + id;
      }
      objReturn.isError = isError;
      objReturn.msg = msg;
      objReturn.wmsDto = wmsDto;
      objReturn = JSON.stringify(objReturn);
      return objReturn;
    }
        /**
   * 
   * @param {*} record_type 
   * @param {*} id 
   * @returns {*} objReturn for Dilogin Input
   *
   /**
   * 
   * @param {*} record_type transferInput
   * @param {*} id 
   * @returns {*} objReturn for Dilogin Input
   *

     function Pending_State(record_type,id){//Pending_State
        var isError = false;
        var msg = 'Msg Default [7]';
        var items = [];
        var wmsDto = {};
        var objReturn = {};
        try{//Para el purchase order estatus Pending Receipt
          var filters = [];
          filters.push({name:"internalid",
                        operator:"is", 
                        values:id});
          filters.push({name:"itemtype", 
                        operator:"is", 
                        values:['InvtPart','Kit']});
          if(record_type == 'purchaseorder'){//Si el registro es del tipo purchaseorder
            filters.push({name:"status", 
            operator:"anyof", 
            values:"PurchOrd:B"});
            }
          var searchInput = search.create({
            type: record_type,
              filters: filters,
              columns : [
                  { name: 'status'},
                  { name: 'internalid'},
                  {name: "custbody11"},//Fecha Entrega
                  { name: 'internalid',join:'vendor'},
                  { name: 'internalid',join:'customer'},
                  { name: 'location'},
                  { name: 'custbody_consignacion'},
                  { name: 'custbody_amazon_smec'},
                  { name: 'custbody_response_dilogin_input'},
                  { name: 'item'},
                  { name: 'itemtype'},
                  { name: 'quantity'},
                  { name: 'upccode', join: 'item'},
                  { name: 'custitem1', join: 'item'}, //idVertical
                  { name: "custitem_talla", join : "item"},
                  { name: 'custitem_color', join: 'item'},
                  { name: 'custitem13', join: 'item'}, //Modelo
                  { name: 'custbody_quality_status'},
              ]
          });
          var countItem = 0;
            searchInput.run().each(function (result) {
              var item={};
              wmsDto.fechaEntrega = moment(today, "DD/MM/YYYY");
              wmsDto.fechaEntrega = wmsDto.fechaEntrega.format("DD/MM/YYYY");
    
              wmsDto.idOdc = id;
              wmsDto.idAlmacen = result.getValue({name: 'location'});
              wmsDto.idProveedor = 0;
              switch (record_type) {
                case 'purchaseorder':
                  wmsDto.idProveedor = result.getValue({ name: 'internalid',join:'vendor'});
                  break;
                case 'returnauthorization':
                  wmsDto.idProveedor = result.getValue({ name: 'internalid',join:'customer'});
                  break;
              }
              if(result.getValue({name: "custbody_amazon_smec"}) == true ){
                wmsDto.idAlmacen = 15;
              }
    
              wmsDto.tipoOdc = 'Firme';
              if(record_type == 'purchaseorder')
              {
                if(result.getValue({name: "custbody_consignacion"}) == true ){
                  wmsDto.tipoOdc = 'Consigna';
                }
              }
    
              wmsDto.idSeller = '';
              wmsDto.sellerName = '';
              countItem += 1;
              item.atributo = 'Talla: ' + result.getValue({name: "custitem_talla", join : "item"}) + ' Color: ' + result.getValue({name: "custitem_color", join : "item"});
              item.cantidad = Math.abs(parseInt(result.getValue({name: "quantity"})));
              item.descripcion = result.getText({name: "item"});
              item.descripcion = item.descripcion.replace(/[^a-zA-Z 0-9.]+/g, '');        
              item.ean = result.getValue({ name: 'upccode', join: 'item'});
              item.idVertical = 0;
              if(result.getValue({ name: 'custitem1', join: 'item'}).length > 0){
                item.idVertical = result.getValue({ name: 'custitem1', join: 'item'});
              }
              item.idWb = countItem;
              item.modelo = result.getValue({ name: 'custitem13', join: 'item'});
              item.sku = result.getValue({ name: 'upccode', join: 'item'});
              item.validaSerie = "0";
              item.imagen = "";
              item.publication = "";
              item.validaCaducidad = "";
              item.edoCal = result.getText({ name: 'custbody_quality_status'});
              items.push(item);
              if(item.edoCal == ''){
                isError = true;
                msg = "Completar campo Estado Calidad WMS";
              }
              return true;
            });
            wmsDto.listProducto = items;
            wmsDto = JSON.stringify(wmsDto);
    
            if(countItem == 0){
              isError = true;
              msg = "Sin Items para Dilogin";
            }
        }
        catch(error){
          log.error('Dilogin Pending_State',error);
          isError = true;
          msg = 'Internal Error GetDto ' + record_type + ' Id: '  + id;
        }

        return {
            transfer:transfer,
            output:output,
            input:input,
            inputDto:inputDto,
            msgTest:msgTest
          };
      }//End Pending_state For Status
 });*/

